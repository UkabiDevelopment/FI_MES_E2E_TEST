{
  "stats": {
    "suites": 1,
    "tests": 7,
    "passes": 7,
    "pending": 0,
    "failures": 0,
    "start": "2025-04-04T07:26:58.983Z",
    "end": "2025-04-04T07:28:59.328Z",
    "duration": 120345,
    "testsRegistered": 7,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "73df3de6-f81c-4043-9d40-bb14ffaffd50",
      "title": "",
      "fullFile": "cypress\\e2e\\specs\\task-calendar.cy.js",
      "file": "cypress\\e2e\\specs\\task-calendar.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5cf64100-482e-401e-9cbb-6ac413cd547a",
          "title": "Task Calendar Test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test Case 1: Verify the page task-calendar",
              "fullTitle": "Task Calendar Test Test Case 1: Verify the page task-calendar",
              "timedOut": null,
              "duration": 10950,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange: Define the expected URL part\nconst expectedUrl = '/task-calender';\n// Assert:\ncy.VerifyUrl(expectedUrl);",
              "err": {},
              "uuid": "0485cb41-8df5-495f-8856-8353f7e75559",
              "parentUUID": "5cf64100-482e-401e-9cbb-6ac413cd547a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test Case 2: Should navigate next and previous pages and change page size",
              "fullTitle": "Task Calendar Test Test Case 2: Should navigate next and previous pages and change page size",
              "timedOut": null,
              "duration": 19024,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange\ntaskCalendar.ensureDefaultPaginationState();\n// Act: Perform pagination actions\ntaskCalendar.paginationNextButton();\ntaskCalendar.paginationPreviousButton();\n// Act: Change page size\ntaskCalendar.selectPageSize(50);\n// Assert: Verify expected results\ntaskCalendar.getCurrentPage().should('eq', 1); // Verify back to first page\ntaskCalendar.getPageSize().should('eq', 50);",
              "err": {},
              "uuid": "d96c422c-b093-4ac5-a2c5-123a191ca882",
              "parentUUID": "5cf64100-482e-401e-9cbb-6ac413cd547a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test Case 3: Should select a task from the list and confirm deletion",
              "fullTitle": "Task Calendar Test Test Case 3: Should select a task from the list and confirm deletion",
              "timedOut": null,
              "duration": 10499,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const uniqueId = _data.default.delettionTaskUniqueIdGrid;\n// Arrange: \n// Check if the task exists in the list and select the checkbox if available\nconst taskFound = taskCalendar.checkTaskExistenceAndSelect(uniqueId);\n// Act: Perform actions if task is found\nif (taskFound) {\n  taskCalendar.deleteTaskFromGrid();\n} else {\n  // Log a message if task is not found\n  cy.log('No task to delete.');\n}\n// Assert: Verify the task has been deleted or log a message if not found\nif (taskFound) {\n  cy.log(`Task with unique ID ${uniqueId} has been deleted.`);\n} else {\n  cy.log('No task was selected for deletion.');\n}",
              "err": {},
              "uuid": "a45eac00-ec4d-45ab-a85a-8d3dc16d65e2",
              "parentUUID": "5cf64100-482e-401e-9cbb-6ac413cd547a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test Case 4: drag task from grid and drop task to calendar",
              "fullTitle": "Task Calendar Test Test Case 4: drag task from grid and drop task to calendar",
              "timedOut": null,
              "duration": 17730,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const uniqueId = _data.default.dragAndDropTaskUniqueId;\nconst ofNumber = _data.default.delettionTaskOfNumberIdCalendar;\n// Arrange: Set up initial conditions\ntaskCalendar.preparesForDragAndDrop(uniqueId);\n// Act: Perform the drag-and-drop action\ntaskCalendar.dragAndDropTaskFromGridToCalendar(uniqueId);\n// Assert: Verify the task is successfully dropped and check for any popups or validation\ntaskCalendar.verifyTaskDroppedAndValidated(ofNumber);\ncy.wait(5000);",
              "err": {},
              "uuid": "15bd275c-758d-47aa-a480-8fa368f47f62",
              "parentUUID": "5cf64100-482e-401e-9cbb-6ac413cd547a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test Case 5:  drag splitted task from one day in calendar and drop task to another day in calendar",
              "fullTitle": "Task Calendar Test Test Case 5:  drag splitted task from one day in calendar and drop task to another day in calendar",
              "timedOut": null,
              "duration": 14419,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const ofNumber = _data.default.delettionTaskOfNumberIdCalendar;\n// Arrange: Check if the task exists on the calendar before proceeding\nconst taskFound = taskCalendar.checkTaskInCalendar(ofNumber);\n// Act: Perform the drag-and-drop action\nif (taskFound) {\n  taskCalendar.dragAndDropTaskFromCalendarToCalendar(ofNumber);\n  // Assert: Verify the splitted  task is not drag and drop show warning message\n  cy.get('.toast-message').should('contain', _es.default.DayIntervalTask);\n} else {\n  cy.log('No task found in the calendar.');\n}\ncy.wait(5000);",
              "err": {},
              "uuid": "be5a9b40-c426-49b0-9012-06e079ea7a9c",
              "parentUUID": "5cf64100-482e-401e-9cbb-6ac413cd547a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test Case 6: Should delete task from calendar if available",
              "fullTitle": "Task Calendar Test Test Case 6: Should delete task from calendar if available",
              "timedOut": null,
              "duration": 15954,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const ofNumber = _data.default.delettionTaskOfNumberIdCalendar;\nconst uniqueId = _data.default.dragAndDropTaskUniqueId;\n// Arrange: Check if the task exists on the calendar before proceeding\nconst taskFound = taskCalendar.checkTaskInCalendar(ofNumber);\n// Act: If the task exists, perform the delete action\nif (taskFound) {\n  taskCalendar.deleteTaskFromCalendar(ofNumber);\n  // Assert: Verify the task is deleted\n  taskCalendar.verifyTaskDeletion(ofNumber, uniqueId);\n} else {\n  cy.log('No task found in the calendar to delete.');\n}",
              "err": {},
              "uuid": "36cdf62d-7b2b-4da4-8924-9bfac19e47d3",
              "parentUUID": "5cf64100-482e-401e-9cbb-6ac413cd547a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test Case 7: drag task from one day in calendar and drop task to another day in calendar",
              "fullTitle": "Task Calendar Test Test Case 7: drag task from one day in calendar and drop task to another day in calendar",
              "timedOut": null,
              "duration": 30959,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const uniqueId = _data.default.dragAndDropNotSplittedTaskUniqueId;\nconst ofNumber = _data.default.NotSplittedTaskTaskOfNumberIdCalendar;\n// Arrange: Set up initial conditions\ntaskCalendar.filterTaskInGridUsingOfNumber(ofNumber);\ntaskCalendar.preparesForDragAndDrop(uniqueId);\ntaskCalendar.dragAndDropTaskFromGridToCalendar(uniqueId);\ntaskCalendar.verifyTaskDroppedAndValidated(ofNumber);\nconst taskFound = taskCalendar.checkTaskInCalendar(ofNumber);\n// Act: Perform the drag-and-drop action\nif (taskFound) {\n  taskCalendar.dragAndDropTaskFromCalendarToCalendar(ofNumber);\n  cy.wait(2000);\n  //Assert: Verify the splitted  task is not drag and drop show warning message\n  cy.get('#schedule_calendar').should('contain', ofNumber);\n  taskCalendar.deleteTaskFromCalendar(ofNumber);\n  // Assert: Verify the task is deleted\n  taskCalendar.verifyTaskDeletion(ofNumber, uniqueId);\n} else {\n  cy.log('No task found in the calendar.');\n}\ncy.wait(5000);",
              "err": {},
              "uuid": "33bee7df-17b6-4379-90aa-9fc4363c766d",
              "parentUUID": "5cf64100-482e-401e-9cbb-6ac413cd547a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0485cb41-8df5-495f-8856-8353f7e75559",
            "d96c422c-b093-4ac5-a2c5-123a191ca882",
            "a45eac00-ec4d-45ab-a85a-8d3dc16d65e2",
            "15bd275c-758d-47aa-a480-8fa368f47f62",
            "be5a9b40-c426-49b0-9012-06e079ea7a9c",
            "36cdf62d-7b2b-4da4-8924-9bfac19e47d3",
            "33bee7df-17b6-4379-90aa-9fc4363c766d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 119535,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}